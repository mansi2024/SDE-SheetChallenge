// Time Complexity O(n) by using Kadane's Algorithm

//Logic: what we are doing is basically taking the max of ith element or its previous sum with ith element and then returning whatever the max is.

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int max_sum=nums[0], sum = nums[0];
        for(int i=1;i<nums.size();i++){
            sum=max(nums[i],sum+nums[i]);
            if(sum>max_sum)
                max_sum=sum;
        }
        return max_sum;
    }
};
